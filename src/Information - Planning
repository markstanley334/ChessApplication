

My personal planning document:

This document may be messy and just represents my current thinking

Keep in mind that this project I am writing almost solely on my own, without consulting other code that makes chess.
So it could be made more efficiently but this project is more about learning how to use JavaFX and figuring out the logic on my own.


DRAW RULES: 50 move rule, draw by repetition, draw by insufficient material

50 move rule: store a count variable and call draw if it reaches 50. Each time a pawn moves or a piece is captured, restart the count to 1

draw by repetition: make a hashmap of copies of the board. If there are 3 copies of the same position after black moves, then it is a draw.

draw by insufficient material: go through the arrays of black and white's pieces, it will be a draw if:

if there are any pawns, rooks, or queens then it will not be a draw by insufficient material

king vs king
king and bishop vs king
king and knight vs king
king and 2 knights vs king
king and knight vs king and knight
king and 2+ bishops (if different colours)


King class:

refresh function:

first go in bishop and rook directions to pin own pieces and to look for checks.
if any checks, increment check counter by one (and keep piece in mind, this will matter for blocks)
check knight directions to see if in check from knight

if in 1 check, look for available moves around:
    if same piece, unavailable
    if opponent piece, check if defended:
        if not defended, add to available moves
    if empty square, check if opponents pieces can move there ( this would mean that both sides would need to be refreshed after a move)


update where king can move

for blocking,
    determine the direction of the check and where the piece is
    move in that direction starting from one square past king, then for each square:
        loop through all pieces available moves, if the squares match,
            then add that move to an array of size 2 int[2][2]. (this will have to be created in the piece class)
        after all the squares have been looped through, for each piece:
            if the piece's blockarray is empty, remove all availablemoves
            if it has moves in it, add them to availablemoves


castling:
    check all game moves to see if the king has moved and rooks too
    if not, check to see if empty spaces between king and rook (also check opponents available moves to make sure the squares are undefended)
    if available, add the move to available moves (when moving the king, if he moves 2 squares, then move the rook to the other side of him)

king has to refresh LAST, as the king refresh will remove available moves of pinned pieces, and use the
pieces available moves for blocks in case of checks.


3. Make game

in game class, create a "notationMove(previousSquare,newSquare)" function, which takes a move and makes it in chess notation
ex: 'a4', 'Na7', 'Nxf7', it will then append this to the moves ArrayList

4. Application

Button panes:

1. for the moves in the top right (listview)

2. for going forwards or backwards on a move

3. for restarting game or flipping board

GridPane:

FINISHING PROJECT

if in check, only care about king and blocking pieces

check spatially where it can move, then ensure that that works with king


AESTHETICS:

from nothing selected:

clicking on empty square: does nothing
clicking on opponents piece: does nothing

clicking on own piece: colour of square the piece is on gets darker
    if piece has no available squares (pinned, king in check, or blocked in): does nothing
    if piece has available squares (can block, move, or capture): available squares get dark circle in middle
        if available square has a piece on it, (piece wont be king that would already be checkmate)

if piece is selected (should be flag for this):
    clicking on unavailable square simply deselects the piece and resets the colours, circles, and borders
    clicking on available square moves the piece there (images have to update)

if king is in check, some sort of effect (like a red border) to indicate this

if checkmate / stalemate / draw of some sort: indicate the result of the game to the user

moves should show up on right side

GAME LOGIC:

When the application is launched, a new game will be created







